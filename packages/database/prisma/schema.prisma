generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum ContainerStatus {
  CREATING
  RUNNING
  STOPPED
  FAILED
  TERMINATED
}

enum RequestStatus {
  PENDING
  PENDING_CONFIRMATION
  CONFIRMED
  DENIED
  REJECTED
  EXECUTING
  COMPLETED
  FAILED
  TIMEOUT
  EXPIRED
}

enum NotificationChannel {
  EMAIL
  WHATSAPP
  BOTH
}

enum ConfirmationType {
  EMAIL
  WHATSAPP
  MULTI_FACTOR
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  githubId        String    @unique
  githubUsername  String    @unique
  name            String?
  avatarUrl       String?
  role            UserRole  @default(USER)

  // Private communication channels
  privateEmail    String?   @unique // user123@aidev.platform
  whatsappNumber  String?   @unique // Assigned WhatsApp number

  // Security
  ipWhitelist     String[]  @default([])
  totpSecret      String?   // For 2FA if enabled
  twoFactorEnabled Boolean  @default(false)

  // Preferences
  yoloMode        Boolean   @default(false)
  notificationChannel NotificationChannel @default(BOTH)
  timezone        String    @default("UTC")

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastActiveAt    DateTime?

  // Relations
  apiTokens       ApiToken[]
  containers      Container[]
  repositories    Repository[]
  requests        Request[]
  confirmations   Confirmation[]
  auditLogs       AuditLog[]
  notifications   Notification[]
  sessions        Session[]
  pushSubscriptions PushSubscription[]
  notificationSettings NotificationSettings?
  containerSessions ContainerSession[]
}

model ApiToken {
  id              String    @id @default(cuid())
  userId          String
  name            String    // e.g., "Anthropic", "OpenAI"
  service         String    // e.g., "anthropic", "openai"
  encryptedToken  String    // Encrypted API key
  lastUsedAt      DateTime?
  expiresAt       DateTime?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, service])
  @@index([userId])
}

model Container {
  id              String    @id @default(cuid())
  userId          String    @unique
  dockerId        String?   // Docker container ID
  kubernetesName  String?   // K8s pod name

  status          ContainerStatus @default(CREATING)
  imageTag        String    @default("latest")

  // Resource limits
  memoryLimit     Int       @default(2048) // MB
  cpuLimit        Float     @default(2.0)  // CPU cores
  diskLimit       Int       @default(10240) // MB

  // Networking
  internalIp      String?
  port            Int?

  // Monitoring
  lastHealthCheck DateTime?
  healthStatus    String?
  resourceUsage   Json?     // CPU, memory, disk usage metrics

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  startedAt       DateTime?
  stoppedAt       DateTime?

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Repository {
  id              String    @id @default(cuid())
  userId          String
  githubId        Int       @unique
  fullName        String    // owner/repo
  name            String
  owner           String
  private         Boolean

  // Permissions
  canRead         Boolean   @default(true)
  canWrite        Boolean   @default(false)
  protectedBranches String[] @default(["main", "master", "develop", "staging"])

  // Metadata
  defaultBranch   String    @default("main")
  language        String?
  description     String?
  url             String
  cloneUrl        String

  lastSyncedAt    DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  requests        Request[]

  @@unique([userId, githubId])
  @@index([userId])
  @@index([fullName])
}

model Request {
  id              String    @id @default(cuid())
  userId          String

  // Request details
  command         String    @db.Text
  source          String    // Email address that sent the request
  channel         NotificationChannel @default(EMAIL)
  rawMessage      String?   @db.Text
  parsedCommand   String?   @db.Text
  attachments     Json?     // File attachments metadata

  // Target
  repositoryId    String?
  targetBranch    String?

  // Status
  status          RequestStatus @default(PENDING_CONFIRMATION)
  confirmationRequired Boolean @default(true)

  // Confirmation system
  confirmationToken String?  @unique
  confirmedAt     DateTime?
  expiresAt       DateTime?
  emailFallbackSent Boolean @default(false)

  // Execution
  executionStartedAt DateTime?
  executionEndedAt   DateTime?
  completedAt     DateTime?
  output          String?   @db.Text
  error           String?   @db.Text
  exitCode        Int?
  sessionId       String?   // Tmux/Claude Code session ID

  // Metadata
  sourceIp        String?
  userAgent       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  repository      Repository? @relation(fields: [repositoryId], references: [id])
  confirmations   Confirmation[]
  notifications   Notification[]
  auditLogs       AuditLog[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model Confirmation {
  id              String    @id @default(cuid())
  userId          String
  requestId       String

  type            ConfirmationType
  token           String    @unique @default(cuid())

  confirmed       Boolean   @default(false)
  confirmedAt     DateTime?
  confirmedBy     String?   // IP address or identifier

  expiresAt       DateTime
  createdAt       DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  request         Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([requestId])
  @@index([token])
  @@index([expiresAt])
}

model Notification {
  id              String    @id @default(cuid())
  userId          String
  requestId       String?

  channel         NotificationChannel
  type            String    // confirmation_required, execution_started, execution_completed, error
  subject         String?
  content         String    @db.Text
  metadata        Json?

  sent            Boolean   @default(false)
  sentAt          DateTime?
  delivered       Boolean   @default(false)
  deliveredAt     DateTime?
  failed          Boolean   @default(false)
  failureReason   String?

  createdAt       DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  request         Request?  @relation(fields: [requestId], references: [id])

  @@index([userId])
  @@index([requestId])
  @@index([createdAt])
  @@index([sent, delivered])
}

model AuditLog {
  id              String    @id @default(cuid())
  userId          String
  requestId       String?

  action          String    // login, logout, request_created, request_confirmed, container_started, etc.
  details         Json?

  ipAddress       String?
  userAgent       String?

  createdAt       DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  request         Request?  @relation(fields: [requestId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model Session {
  id              String    @id @default(cuid())
  userId          String
  token           String    @unique
  refreshToken    String    @unique

  ipAddress       String?
  userAgent       String?

  expiresAt       DateTime
  refreshExpiresAt DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastActivityAt  DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([refreshToken])
  @@index([expiresAt])
}

model PushSubscription {
  id              String    @id @default(cuid())
  userId          String
  endpoint        String
  p256dh          String
  auth            String
  isActive        Boolean   @default(true)
  deviceName      String?
  userAgent       String?
  lastUsed        DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@index([userId])
  @@index([isActive])
}

model NotificationSettings {
  id              String    @id @default(cuid())
  userId          String    @unique
  emailFallback   Boolean   @default(true)  // Send email if push fails
  emailTimeout    Int       @default(5)     // Minutes before email fallback
  autoCancel      Int       @default(15)    // Minutes before auto-cancel
  pushEnabled     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ContainerSession {
  id              String    @id @default(cuid())
  containerId     String    @unique
  userId          String
  threadId        String
  repositoryId    String?
  sessionId       String?   // Claude Code tmux session ID

  // Status
  isActive        Boolean   @default(true)
  lastActivityAt  DateTime  @default(now())

  // Lifecycle
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  stoppedAt       DateTime?

  // Resource usage
  cpuUsage        Float?    // Percentage
  memoryUsage     Int?      // MB
  diskUsage       Int?      // MB

  // Metadata
  commitHash      String?   // Last commit when saved
  filesModified   Int?      // Number of files modified

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([threadId])
  @@index([isActive])
  @@index([lastActivityAt])
}